import { Injectable, OnModuleInit, Logger } from '@nestjs/common';
import { Telegraf } from 'telegraf';
import { message } from 'telegraf/filters';
import { UsersService } from '@/users/users.service';
import { ConfigService } from '@nestjs/config';

@Injectable()
export class TelegramBotService {
    private readonly logger = new Logger(TelegramBotService.name);
    private bot: Telegraf;
    private pendingVerifications = new Set<string>();

    constructor(
        private readonly usersService: UsersService,
        private readonly configService: ConfigService
    ) {
        const token = this.configService.get('TELEGRAM_BOT_TOKEN');

        this.bot = new Telegraf(token);
        this.setupGlobalHandlers();
    }


    private setupGlobalHandlers() {
        this.bot.on(message('sticker'), (ctx) => ctx.reply('üëç'))
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        this.bot.on(message('contact'), async (ctx) => {
            const telegramId = ctx.from.id.toString();

            const phone = ctx.message.contact.phone_number;

            try {
                if (!phone?.startsWith('+')) {
                    await ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (+7...)');
                    return;
                }

                await this.usersService.verifyPhone(telegramId, phone);
                await ctx.reply('‚úÖ –ù–æ–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!');
                this.pendingVerifications.delete(telegramId);

            } catch (error) {
                this.logger.error(`–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è ${telegramId}: ${error.message}`);
                await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞');
            }
        });
        this.bot.launch()

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        this.bot.catch((err, ctx) => {
            this.logger.error(`Bot error: ${err}`);
            ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
        });
    }
    async requestPhoneVerification(telegramId: string) {
        if (this.pendingVerifications.has(telegramId)) {
            this.logger.log(`–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è ${telegramId}`);

        }

        this.pendingVerifications.add(telegramId);

        try {
            await this.bot.telegram.sendMessage(
                telegramId,
                '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:',
                {
                    reply_markup: {
                        keyboard: [[{
                            text: 'üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä',
                            request_contact: true
                        }]],
                        one_time_keyboard: true,
                        resize_keyboard: true
                    }
                }
            );
        } catch (error) {
            this.pendingVerifications.delete(telegramId);
            this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
            throw error;
        }
    }
}